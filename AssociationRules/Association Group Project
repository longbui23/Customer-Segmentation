{"cells":[{"cell_type":"markdown","metadata":{"id":"ez-9fUdDuHj0"},"source":["  ## Connect with Google Drive"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":867,"status":"ok","timestamp":1713669799223,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"},"user_tz":240},"id":"0bQmgaKhlw8K","outputId":"41646bce-5a9e-4a19-828f-deecb4380889"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","/content/drive/.shortcut-targets-by-id/1TCoZWU2Wjo75PZ0fKiEy4wCqIv5IU5JX/Ecommerce - Data 300\n"]}],"source":["#connect with drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","%cd /content/drive/My Drive/Ecommerce"]},{"cell_type":"markdown","metadata":{"id":"kPhuYWh9w-lY"},"source":["## Import libraries and df"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13185,"status":"ok","timestamp":1713669813950,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"},"user_tz":240},"id":"qamLyx20h0ps","outputId":"3ac1daca-3ef4-473f-cc97-0f50be41dd73"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: apyori in /usr/local/lib/python3.10/dist-packages (1.1.2)\n"]}],"source":["#import libraries\n","import pandas as pd\n","from mlxtend.preprocessing import TransactionEncoder\n","from mlxtend.frequent_patterns import apriori\n","from mlxtend.frequent_patterns import association_rules as arules\n","import numpy as np\n","import matplotlib.pyplot as plt\n","!pip install apyori\n","from apyori import apriori"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1328,"status":"ok","timestamp":1713669815273,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"},"user_tz":240},"id":"rTf9fGiHvilM","outputId":"c4ce5de8-db69-45d8-fa1f-5fcb84aca514"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}],"source":["df = pd.read_csv(\"AssociationRules/transaction_df.csv\")"]},{"cell_type":"markdown","source":["# Data Cleaning"],"metadata":{"id":"q1lTqw0M3b46"}},{"cell_type":"code","source":["df = df.drop(columns=['Unnamed: 0'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pTa1dmM43XHe","executionInfo":{"status":"ok","timestamp":1713669830714,"user_tz":240,"elapsed":138,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"55cda1c1-d8c2-4c51-8ed6-2099c7eaa8ce"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["def clean_product_ids(ids_str):\n","    # Remove square brackets and single quotes\n","    ids_str = ids_str.strip(\"[]\").replace(\"'\", \"\")\n","    # Split the string to extract individual product IDs\n","    return ids_str.split(',')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E0Kp4W3V4vbF","executionInfo":{"status":"ok","timestamp":1713669830934,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"5e0fcec4-2769-4a95-fb4d-845af12012ee"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["# Apply the function to the 'product_ids' column\n","df['product_ids'] = df['product_ids'].apply(clean_product_ids)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FiJ2qRIH44nJ","executionInfo":{"status":"ok","timestamp":1713669831095,"user_tz":240,"elapsed":163,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"095742f4-ca72-47d4-8ef8-c1387d4009d3"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"XWuao5YLCQzd","executionInfo":{"status":"ok","timestamp":1713669831095,"user_tz":240,"elapsed":16,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"7e25aef9-1b85-4b57-d180-4b6080fab78a"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["                           order_id                         product_ids  \\\n","0  00010242fe8c5a6d1ba2dd792cb16214  [4244733e06e7ecb4970a6e2683c13e61]   \n","1  00018f77f2f0320c557190d7a144bdd3  [e5f2d52b802189ee658865ca93d83a8f]   \n","2  c105be01f21c9df6a2579f59b95cbcd9  [d2f5484cbffe4ca766301b21ab9246dd]   \n","3  000229ec398224ef6ca0657da4fc703e  [c777355d18b72b67abbeef9df44fd0fd]   \n","4  00024acbcdf0a6daa1e931b038114c75  [7634da152a4610f1595efa32f14722fc]   \n","\n","                        customer_id order_status order_purchase_timestamp  \\\n","0  3ce436f183e68e07877b285a838db11a    delivered           9/13/2017 8:59   \n","1  f6dd3ec061db4e3987629fe6b26e5cce    delivered          4/26/2017 10:53   \n","2  02288a47f696f3054b9ef1d5f8e73973    delivered          9/18/2017 16:12   \n","3  6489ae5e4333f3693df5ad4372dab6d3    delivered          1/14/2018 14:33   \n","4  d4eb9395c8c0431ee92fce09860c5a06    delivered           8/8/2018 10:00   \n","\n","  order_approved_at order_delivered_carrier_date  \\\n","0           45:35.0                      34:16.0   \n","1           05:13.0                      35:00.0   \n","2           27:55.0                      00:24.0   \n","3           48:30.0                      36:48.0   \n","4           10:18.0                      28:00.0   \n","\n","  order_delivered_customer_date order_estimated_delivery_date  \\\n","0                       43:48.0                9/29/2017 0:00   \n","1                       04:24.0                5/15/2017 0:00   \n","2                       59:46.0                10/4/2017 0:00   \n","3                       19:16.0                 2/5/2018 0:00   \n","4                       32:39.0                8/20/2018 0:00   \n","\n","                 customer_unique_id  ...  customer_state recency recency_log  \\\n","0  871766c5855e863f6eccc05f988b23cb  ...              RJ     400    0.795825   \n","1  eb28e67c4c0b83846050ddfb8a35d051  ...              SP     395    0.775504   \n","2  eb28e67c4c0b83846050ddfb8a35d051  ...              SP     395    0.775504   \n","3  3818d81c6709e39d06b2738a8d3a2474  ...              MG     277    0.202217   \n","4  af861d436cfc08b2c2ddefd0ba074622  ...              SP      71   -1.997012   \n","\n","   monentary  monentary_log  frequency  frequency_log  clusters_3  clusters_5  \\\n","0      72.19      -0.539326          1      -0.003226           1           2   \n","1     284.56       1.134135          2      -0.003226           2           4   \n","2     284.56       1.134135          2      -0.003226           2           4   \n","3     216.87       0.802715          1      -0.003226           2           1   \n","4      25.78      -1.795606          1      -0.003226           0           0   \n","\n","   clusters_7  \n","0           6  \n","1           3  \n","2           3  \n","3           5  \n","4           1  \n","\n","[5 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-a1aee638-69d4-4dc4-86c7-6e150280b791\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>order_id</th>\n","      <th>product_ids</th>\n","      <th>customer_id</th>\n","      <th>order_status</th>\n","      <th>order_purchase_timestamp</th>\n","      <th>order_approved_at</th>\n","      <th>order_delivered_carrier_date</th>\n","      <th>order_delivered_customer_date</th>\n","      <th>order_estimated_delivery_date</th>\n","      <th>customer_unique_id</th>\n","      <th>...</th>\n","      <th>customer_state</th>\n","      <th>recency</th>\n","      <th>recency_log</th>\n","      <th>monentary</th>\n","      <th>monentary_log</th>\n","      <th>frequency</th>\n","      <th>frequency_log</th>\n","      <th>clusters_3</th>\n","      <th>clusters_5</th>\n","      <th>clusters_7</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>00010242fe8c5a6d1ba2dd792cb16214</td>\n","      <td>[4244733e06e7ecb4970a6e2683c13e61]</td>\n","      <td>3ce436f183e68e07877b285a838db11a</td>\n","      <td>delivered</td>\n","      <td>9/13/2017 8:59</td>\n","      <td>45:35.0</td>\n","      <td>34:16.0</td>\n","      <td>43:48.0</td>\n","      <td>9/29/2017 0:00</td>\n","      <td>871766c5855e863f6eccc05f988b23cb</td>\n","      <td>...</td>\n","      <td>RJ</td>\n","      <td>400</td>\n","      <td>0.795825</td>\n","      <td>72.19</td>\n","      <td>-0.539326</td>\n","      <td>1</td>\n","      <td>-0.003226</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>00018f77f2f0320c557190d7a144bdd3</td>\n","      <td>[e5f2d52b802189ee658865ca93d83a8f]</td>\n","      <td>f6dd3ec061db4e3987629fe6b26e5cce</td>\n","      <td>delivered</td>\n","      <td>4/26/2017 10:53</td>\n","      <td>05:13.0</td>\n","      <td>35:00.0</td>\n","      <td>04:24.0</td>\n","      <td>5/15/2017 0:00</td>\n","      <td>eb28e67c4c0b83846050ddfb8a35d051</td>\n","      <td>...</td>\n","      <td>SP</td>\n","      <td>395</td>\n","      <td>0.775504</td>\n","      <td>284.56</td>\n","      <td>1.134135</td>\n","      <td>2</td>\n","      <td>-0.003226</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>c105be01f21c9df6a2579f59b95cbcd9</td>\n","      <td>[d2f5484cbffe4ca766301b21ab9246dd]</td>\n","      <td>02288a47f696f3054b9ef1d5f8e73973</td>\n","      <td>delivered</td>\n","      <td>9/18/2017 16:12</td>\n","      <td>27:55.0</td>\n","      <td>00:24.0</td>\n","      <td>59:46.0</td>\n","      <td>10/4/2017 0:00</td>\n","      <td>eb28e67c4c0b83846050ddfb8a35d051</td>\n","      <td>...</td>\n","      <td>SP</td>\n","      <td>395</td>\n","      <td>0.775504</td>\n","      <td>284.56</td>\n","      <td>1.134135</td>\n","      <td>2</td>\n","      <td>-0.003226</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>000229ec398224ef6ca0657da4fc703e</td>\n","      <td>[c777355d18b72b67abbeef9df44fd0fd]</td>\n","      <td>6489ae5e4333f3693df5ad4372dab6d3</td>\n","      <td>delivered</td>\n","      <td>1/14/2018 14:33</td>\n","      <td>48:30.0</td>\n","      <td>36:48.0</td>\n","      <td>19:16.0</td>\n","      <td>2/5/2018 0:00</td>\n","      <td>3818d81c6709e39d06b2738a8d3a2474</td>\n","      <td>...</td>\n","      <td>MG</td>\n","      <td>277</td>\n","      <td>0.202217</td>\n","      <td>216.87</td>\n","      <td>0.802715</td>\n","      <td>1</td>\n","      <td>-0.003226</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>00024acbcdf0a6daa1e931b038114c75</td>\n","      <td>[7634da152a4610f1595efa32f14722fc]</td>\n","      <td>d4eb9395c8c0431ee92fce09860c5a06</td>\n","      <td>delivered</td>\n","      <td>8/8/2018 10:00</td>\n","      <td>10:18.0</td>\n","      <td>28:00.0</td>\n","      <td>32:39.0</td>\n","      <td>8/20/2018 0:00</td>\n","      <td>af861d436cfc08b2c2ddefd0ba074622</td>\n","      <td>...</td>\n","      <td>SP</td>\n","      <td>71</td>\n","      <td>-1.997012</td>\n","      <td>25.78</td>\n","      <td>-1.795606</td>\n","      <td>1</td>\n","      <td>-0.003226</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a1aee638-69d4-4dc4-86c7-6e150280b791')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a1aee638-69d4-4dc4-86c7-6e150280b791 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a1aee638-69d4-4dc4-86c7-6e150280b791');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6378af8c-2d59-465e-adfd-0494c47909d4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6378af8c-2d59-465e-adfd-0494c47909d4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6378af8c-2d59-465e-adfd-0494c47909d4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["#convert the order_purchase_timestamp to datetime format\n","df['order_purchase_timestamp'] = pd.to_datetime(df['order_purchase_timestamp'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4mthcQ8SvT42","executionInfo":{"status":"ok","timestamp":1713669831477,"user_tz":240,"elapsed":396,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"366b3511-1b2c-4328-af23-c1fcadf129c8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["#get the year of order\n","df['Year'] = df['order_purchase_timestamp'].dt.year"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G7Nb6Fwrv4lj","executionInfo":{"status":"ok","timestamp":1713669831477,"user_tz":240,"elapsed":4,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"bfaefc7f-0db6-4b6f-8f65-0a98cdaefa49"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["df['Year'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x76ccvLRyW6V","executionInfo":{"status":"ok","timestamp":1713669831477,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"b2acae73-7e86-443d-bf22-b52cbe17eb42"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["array([2017, 2018, 2016], dtype=int32)"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["# Seperating data into each year\n","\n"],"metadata":{"id":"7dTCn3C2y5Aj"}},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":176,"status":"ok","timestamp":1713669833452,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"},"user_tz":240},"id":"q5ZuLWUTSH3J","outputId":"4ecce99f-cfb0-41ee-ce66-f921b5d35633"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}],"source":["df1 = df[['order_id', 'product_ids', 'clusters_7','Year']]"]},{"cell_type":"code","source":["df2016 = df1[df1['Year'] == 2016]\n","df2017 = df1[df1['Year'] == 2017]\n","df2018 = df1[df1['Year'] == 2018]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tytMZCUczEhe","executionInfo":{"status":"ok","timestamp":1713669833632,"user_tz":240,"elapsed":182,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"bffc7809-1be4-4cf9-affc-09e8c645da12"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the number of orders in 2016\", len(df2016))\n","print(\"This is the number of orders in 2017\", len(df2017))\n","print(\"This is the number of orders in 2018\", len(df2018))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q8VNaHLBNakE","executionInfo":{"status":"ok","timestamp":1713669833632,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"42094563-761a-4fc6-df05-a14f12e11090"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the number of orders in 2016 311\n","This is the number of orders in 2017 44579\n","This is the number of orders in 2018 53775\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["# Year 2016"],"metadata":{"id":"aVr-Qw3GzWOe"}},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":131,"status":"ok","timestamp":1713669835865,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"},"user_tz":240},"id":"gaZvYVZbnPZC","outputId":"741b4447-6748-4025-c259-3b8b3f8c6655"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}],"source":["#seperate them into clusters\n","df2016_0 = df2016[df2016['clusters_7']==0]\n","df2016_1 = df2016[df2016['clusters_7']==1]\n","df2016_2 = df2016[df2016['clusters_7']==2]\n","df2016_3 = df2016[df2016['clusters_7']==3]\n","df2016_4 = df2016[df2016['clusters_7']==4]\n","df2016_5 = df2016[df2016['clusters_7']==5]\n","df2016_6 = df2016[df2016['clusters_7']==6]"]},{"cell_type":"code","source":["print(\"This is the number of orders in 2016 cluster 0\", len(df2016_0)) #too small\n","print(\"This is the number of orders in 2016 cluster 1\", len(df2016_1)) #no orders\n","print(\"This is the number of orders in 2016 cluster 2\", len(df2016_2))\n","print(\"This is the number of orders in 2016 cluster 3\", len(df2016_3))\n","print(\"This is the number of orders in 2016 cluster 4\", len(df2016_4)) #too small\n","print(\"This is the number of orders in 2016 cluster 5\", len(df2016_5)) #too small\n","print(\"This is the number of orders in 2016 cluster 6\", len(df2016_6)) #1 item per order"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4r3xwUAYvmqb","executionInfo":{"status":"ok","timestamp":1713669836044,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"8ec7e1f2-b3bd-43ad-d0a8-c6ea6e297be9"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the number of orders in 2016 cluster 0 2\n","This is the number of orders in 2016 cluster 1 0\n","This is the number of orders in 2016 cluster 2 192\n","This is the number of orders in 2016 cluster 3 38\n","This is the number of orders in 2016 cluster 4 1\n","This is the number of orders in 2016 cluster 5 2\n","This is the number of orders in 2016 cluster 6 76\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 2\n"],"metadata":{"id":"GmMjrJGHDCiQ"}},{"cell_type":"code","source":["# Initialize lists to store rule information\n","rules_list = []\n","support_list = []\n","confidence_list = []\n","lift_list = []\n","cluster_list = []\n","year_list = []"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XKGvy2Y58jhS","executionInfo":{"status":"ok","timestamp":1713669836045,"user_tz":240,"elapsed":2,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"79d9fe10-9457-436a-f236-3a5abe77b1e3"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":153,"status":"ok","timestamp":1713669836399,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"},"user_tz":240},"id":"1F4bR_3lS73A","outputId":"2a26367b-4667-4983-ff4b-1a16cd317898"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 74 Relation derived.\n"]}],"source":["records2016_2 = []\n","for i in df2016_2['product_ids']:\n","  records2016_2.append(i)\n","\n","association_rules = apriori(records2016_2, min_support=0.005, min_confidence=0.7, min_lift=3, min_length=2)\n","association_results = list(association_rules)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results)))"]},{"cell_type":"code","source":["#collect information\n","for item in association_results:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"2\")\n","    year_list.append(\"2016\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Evulg3dS8x3Y","executionInfo":{"status":"ok","timestamp":1713669836399,"user_tz":240,"elapsed":4,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"67838fd8-c8f5-43e8-961b-3fc24c02de76"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 3"],"metadata":{"id":"NTg0otuDNXKM"}},{"cell_type":"code","source":["records2016_3 = []\n","for i in df2016_3['product_ids']:\n","  records2016_3.append(i)\n","\n","association_rules3 = apriori(records2016_3, min_support=0.0001, min_confidence=0.7, min_lift=3, min_length=2)\n","association_results3 = list(association_rules3)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results3)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UoYMaODpNVep","executionInfo":{"status":"ok","timestamp":1713669836399,"user_tz":240,"elapsed":4,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"5cc457da-1bd4-4e00-b515-80effd22396e"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 12 Relation derived.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["for item in association_results3:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"3\")\n","    year_list.append(\"2016\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cRz91-XK-fHe","executionInfo":{"status":"ok","timestamp":1713669836399,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"e397144a-0509-4ced-eb66-3b67c0fef859"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xanU_HzX-pV7","executionInfo":{"status":"ok","timestamp":1713669836400,"user_tz":240,"elapsed":4,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"7ad83fe7-c6ef-4c21-c514-22a865dda9ad"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["This is the length of rule list 86\n","This is the length of support list 86\n","This is the length of confidence list 86\n","This is the length of lift list 86\n","This is the length of cluster list 86\n","This is the length of year list 86\n"]}]},{"cell_type":"markdown","source":["# Year 2017"],"metadata":{"id":"d7legXU1PoeN"}},{"cell_type":"code","source":["df2017_0 = df2017[df2017['clusters_7']==0]\n","df2017_1 = df2017[df2017['clusters_7']==1]\n","df2017_2 = df2017[df2017['clusters_7']==2]\n","df2017_3 = df2017[df2017['clusters_7']==3]\n","df2017_4 = df2017[df2017['clusters_7']==4]\n","df2017_5 = df2017[df2017['clusters_7']==5]\n","df2017_6 = df2017[df2017['clusters_7']==6]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cv_mOtA4PqWf","executionInfo":{"status":"ok","timestamp":1713669838081,"user_tz":240,"elapsed":237,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"044f6d6e-2ac5-4df6-d67a-5a8fde446d62"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the number of orders in 2017 cluster 0\", len(df2017_0))\n","print(\"This is the number of orders in 2017 cluster 1\", len(df2017_1))\n","print(\"This is the number of orders in 2017 cluster 2\", len(df2017_2))\n","print(\"This is the number of orders in 2017 cluster 3\", len(df2017_3))\n","print(\"This is the number of orders in 2017 cluster 4\", len(df2017_4))\n","print(\"This is the number of orders in 2017 cluster 5\", len(df2017_5))\n","print(\"This is the number of orders in 2017 cluster 6\", len(df2017_6))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MwiQlkraQBn9","executionInfo":{"status":"ok","timestamp":1713669838284,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"afe6014b-7bef-42b0-a753-c0af6e3b2997"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the number of orders in 2017 cluster 0 344\n","This is the number of orders in 2017 cluster 1 11\n","This is the number of orders in 2017 cluster 2 21368\n","This is the number of orders in 2017 cluster 3 5802\n","This is the number of orders in 2017 cluster 4 201\n","This is the number of orders in 2017 cluster 5 916\n","This is the number of orders in 2017 cluster 6 15937\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 0"],"metadata":{"id":"dcqmB6_xQ3vY"}},{"cell_type":"code","source":["records2017_0 = []\n","for i in df2017_0['product_ids']:\n","  records2017_0.append(i)\n","\n","association_rules2017_0 = apriori(records2017_0, min_support=0.0027, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2017_0 = list(association_rules2017_0)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2017_0)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yvQxQXOSQe8W","executionInfo":{"status":"ok","timestamp":1713669838430,"user_tz":240,"elapsed":148,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"3ff1e399-6bc4-44e6-ac85-fed9f798354d"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 52 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2017_0:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"0\")\n","    year_list.append(\"2017\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XgNeiH9-_GoT","executionInfo":{"status":"ok","timestamp":1713669838585,"user_tz":240,"elapsed":156,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"ecdf3cd8-3ceb-4533-d1b0-5a205fa72b33"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LE7e6wt5_Sc_","executionInfo":{"status":"ok","timestamp":1713669838585,"user_tz":240,"elapsed":2,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"eee1f279-c018-41c1-d32b-ab06215464a3"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 138\n","This is the length of support list 138\n","This is the length of confidence list 138\n","This is the length of lift list 138\n","This is the length of cluster list 138\n","This is the length of year list 138\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 2"],"metadata":{"id":"AQHkmwzszR3L"}},{"cell_type":"code","source":["records2017_2 = []\n","for i in df2017_2['product_ids']:\n","  records2017_2.append(i)\n","\n","association_rules2017_2 = apriori(records2017_2, min_support=0.0001, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2017_2 = list(association_rules2017_2)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2017_2)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZvAinkBUzUwG","executionInfo":{"status":"ok","timestamp":1713669844433,"user_tz":240,"elapsed":5849,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"c04387a4-a12e-40f8-ff25-364f368147fe"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 84 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2017_2:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"2\")\n","    year_list.append(\"2017\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DUk8jSPr_VrW","executionInfo":{"status":"ok","timestamp":1713669844433,"user_tz":240,"elapsed":19,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"8ffcc8e9-60a8-44bf-d6f6-17cafb1faefc"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H3TgI9Me_Zy-","executionInfo":{"status":"ok","timestamp":1713669844433,"user_tz":240,"elapsed":18,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"1c1e988f-0d47-4dc2-bf57-19d661cb96cd"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 222\n","This is the length of support list 222\n","This is the length of confidence list 222\n","This is the length of lift list 222\n","This is the length of cluster list 222\n","This is the length of year list 222\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 3"],"metadata":{"id":"vWDVQO-kReQB"}},{"cell_type":"code","source":["records2017_3 = []\n","for i in df2017_3['product_ids']:\n","  records2017_3.append(i)\n","\n","association_rules2017_3 = apriori(records2017_3, min_support=0.0005, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2017_3 = list(association_rules2017_3)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2017_3)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IGF_YgFBQ1az","executionInfo":{"status":"ok","timestamp":1713669844975,"user_tz":240,"elapsed":559,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"a309689d-f557-4e65-a89b-f627c00774a5"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 41 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2017_3:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"3\")\n","    year_list.append(\"2017\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sVFJjbVP_doi","executionInfo":{"status":"ok","timestamp":1713669844975,"user_tz":240,"elapsed":7,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"0cb888bb-b0d0-47bc-c725-36a6db7faee7"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ISXps3e_-bN","executionInfo":{"status":"ok","timestamp":1713669844976,"user_tz":240,"elapsed":6,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"87bf0887-8063-4793-da19-8082ce83f18c"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 263\n","This is the length of support list 263\n","This is the length of confidence list 263\n","This is the length of lift list 263\n","This is the length of cluster list 263\n","This is the length of year list 263\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 4"],"metadata":{"id":"nAAqwhimRyGg"}},{"cell_type":"code","source":["records2017_4 = []\n","for i in df2017_4['product_ids']:\n","  records2017_4.append(i)\n","\n","association_rules2017_4 = apriori(records2017_4, min_support=0.004, min_confidence=0.7, min_lift=3, min_length=2)\n","association_results2017_4 = list(association_rules2017_4)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2017_4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6Abe84YwRoua","executionInfo":{"status":"ok","timestamp":1713669844976,"user_tz":240,"elapsed":5,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"6b47f413-e9f1-4246-de11-61f5372f678b"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 44 Relation derived.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["for item in association_results2017_4:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"4\")\n","    year_list.append(\"2017\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n18_pAY9ACef","executionInfo":{"status":"ok","timestamp":1713669844976,"user_tz":240,"elapsed":5,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"53c56333-e099-45f1-e6e6-d2796582df56"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YErgJ3FeAFe3","executionInfo":{"status":"ok","timestamp":1713669844976,"user_tz":240,"elapsed":4,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"7abdb98e-8d33-44ca-eb86-11543d650582"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 307\n","This is the length of support list 307\n","This is the length of confidence list 307\n","This is the length of lift list 307\n","This is the length of cluster list 307\n","This is the length of year list 307\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 5"],"metadata":{"id":"D5jCYvEiSY8e"}},{"cell_type":"code","source":["records2017_5 = []\n","for i in df2017_5['product_ids']:\n","  records2017_5.append(i)\n","\n","association_rules2017_5 = apriori(records2017_5, min_support=0.001, min_confidence=0.6, min_lift=3, min_length=2)\n","association_results2017_5 = list(association_rules2017_5)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2017_5)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"alXpUQoXSX9h","executionInfo":{"status":"ok","timestamp":1713669846599,"user_tz":240,"elapsed":1438,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"24b79394-77cd-42c1-eb22-2953300003d7"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 87 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2017_5:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"5\")\n","    year_list.append(\"2017\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Np2bRRR0AMOi","executionInfo":{"status":"ok","timestamp":1713669846599,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"ec95738a-118b-4232-d31a-a1777c4275bb"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YV8lZAV5ARKS","executionInfo":{"status":"ok","timestamp":1713669846599,"user_tz":240,"elapsed":2,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"0525b723-b0d0-4136-d699-ec2065792528"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 394\n","This is the length of support list 394\n","This is the length of confidence list 394\n","This is the length of lift list 394\n","This is the length of cluster list 394\n","This is the length of year list 394\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 6"],"metadata":{"id":"tsU1nWY7Sv4v"}},{"cell_type":"code","source":["records2017_6 = []\n","for i in df2017_6['product_ids']:\n","  records2017_6.append(i)\n","\n","association_rules2017_6 = apriori(records2017_6, min_support=0.00009, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2017_6 = list(association_rules2017_6)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2017_6)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"attO0swvSuZ1","executionInfo":{"status":"ok","timestamp":1713669857601,"user_tz":240,"elapsed":11003,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"39af96fc-9155-41c9-b4a7-ae3f4a903dc6"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 47 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2017_6:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"6\")\n","    year_list.append(\"2017\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4697FELgAYeT","executionInfo":{"status":"ok","timestamp":1713669857601,"user_tz":240,"elapsed":17,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"69428603-7612-45d8-a8a9-0ff67f1e4574"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F58aIYbmAbGT","executionInfo":{"status":"ok","timestamp":1713669857601,"user_tz":240,"elapsed":16,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"dfb4cd15-f07d-4804-c0b0-75dff6256558"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 441\n","This is the length of support list 441\n","This is the length of confidence list 441\n","This is the length of lift list 441\n","This is the length of cluster list 441\n","This is the length of year list 441\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["# Year 2018"],"metadata":{"id":"rnSnNMzLTmSh"}},{"cell_type":"code","source":["df2018_0 = df2018[df2018['clusters_7']==0]\n","df2018_1 = df2018[df2018['clusters_7']==1]\n","df2018_2 = df2018[df2018['clusters_7']==2]\n","df2018_3 = df2018[df2018['clusters_7']==3]\n","df2018_4 = df2018[df2018['clusters_7']==4]\n","df2018_5 = df2018[df2018['clusters_7']==5]\n","df2018_6 = df2018[df2018['clusters_7']==6]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i0O7C7xPToAY","executionInfo":{"status":"ok","timestamp":1713669885627,"user_tz":240,"elapsed":153,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"a8e889cf-7dd4-4ede-c27f-33d7f000ab25"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the number of orders in 2018 cluster 0\", len(df2018_0))\n","print(\"This is the number of orders in 2018 cluster 1\", len(df2018_1))\n","print(\"This is the number of orders in 2018 cluster 2\", len(df2018_2)) # no orders\n","print(\"This is the number of orders in 2018 cluster 3\", len(df2018_3))\n","print(\"This is the number of orders in 2018 cluster 4\", len(df2018_4))\n","print(\"This is the number of orders in 2018 cluster 5\", len(df2018_5))\n","print(\"This is the number of orders in 2018 cluster 6\", len(df2018_6))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p_cPhlE0UNsI","executionInfo":{"status":"ok","timestamp":1713669885803,"user_tz":240,"elapsed":5,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"13d53147-782a-433e-e3c3-bc8a0bb2e742"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the number of orders in 2018 cluster 0 240\n","This is the number of orders in 2018 cluster 1 11973\n","This is the number of orders in 2018 cluster 2 0\n","This is the number of orders in 2018 cluster 3 4841\n","This is the number of orders in 2018 cluster 4 10296\n","This is the number of orders in 2018 cluster 5 19619\n","This is the number of orders in 2018 cluster 6 6806\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 0"],"metadata":{"id":"aWHzoc_F0nyx"}},{"cell_type":"code","source":["records2018_0 = []\n","for i in df2018_0['product_ids']:\n","  records2018_0.append(i)\n","\n","association_rules2018_0 = apriori(records2018_0, min_support=0.004, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2018_0 = list(association_rules2018_0)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2018_0)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tqM2DCmv0pk6","executionInfo":{"status":"ok","timestamp":1713669885947,"user_tz":240,"elapsed":148,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"20ab728b-20b6-4bbf-cb12-c93e7df69645"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 48 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2018_0:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"0\")\n","    year_list.append(\"2018\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y8yVJcsVAh0c","executionInfo":{"status":"ok","timestamp":1713669885948,"user_tz":240,"elapsed":4,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"38538ec8-a9a2-41d8-9a00-bea04d3bc098"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"APmJbb6-Anqi","executionInfo":{"status":"ok","timestamp":1713669885948,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"3d285c00-6bba-40c8-a616-e73eeb1c080a"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 489\n","This is the length of support list 489\n","This is the length of confidence list 489\n","This is the length of lift list 489\n","This is the length of cluster list 489\n","This is the length of year list 489\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 1"],"metadata":{"id":"yQN4pSfT1Apq"}},{"cell_type":"code","source":["records2018_1 = []\n","for i in df2018_1['product_ids']:\n","  records2018_1.append(i)\n","\n","association_rules2018_1 = apriori(records2018_1, min_support=0.0001, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2018_1 = list(association_rules2018_1)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2018_1)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jaE-mEx41Cr2","executionInfo":{"status":"ok","timestamp":1713669891298,"user_tz":240,"elapsed":5353,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"e7dcc854-b527-438e-c1ef-6ec4a676a95c"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 36 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2018_1:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"1\")\n","    year_list.append(\"2018\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zhqyR5nuAubQ","executionInfo":{"status":"ok","timestamp":1713669891298,"user_tz":240,"elapsed":18,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"ca785efe-8ebf-425d-8c75-4aae939d813e"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CwyT9UuhAzTc","executionInfo":{"status":"ok","timestamp":1713669891298,"user_tz":240,"elapsed":17,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"2e0d03b3-c49f-42ad-8a47-970513322390"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 525\n","This is the length of support list 525\n","This is the length of confidence list 525\n","This is the length of lift list 525\n","This is the length of cluster list 525\n","This is the length of year list 525\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 3"],"metadata":{"id":"sLcR0i6H1VWI"}},{"cell_type":"code","source":["records2018_3 = []\n","for i in df2018_3['product_ids']:\n","  records2018_3.append(i)\n","\n","association_rules2018_3 = apriori(records2018_3, min_support=0.001, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2018_3 = list(association_rules2018_3)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2018_3)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BY-9PIDh1XKG","executionInfo":{"status":"ok","timestamp":1713669891298,"user_tz":240,"elapsed":16,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"a3bb8acc-976a-44ab-99be-009f53543e6a"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["There are 15 Relation derived.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["for item in association_results2018_3:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"3\")\n","    year_list.append(\"2018\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y9AJRmk3A5fG","executionInfo":{"status":"ok","timestamp":1713669891298,"user_tz":240,"elapsed":16,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"acd92a3a-cb45-400f-e97a-92e04eecbdea"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yexKWx4WA9pI","executionInfo":{"status":"ok","timestamp":1713669891453,"user_tz":240,"elapsed":170,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"daf457bf-ba1e-4cd3-ecf6-cc308fcad6b1"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 540\n","This is the length of support list 540\n","This is the length of confidence list 540\n","This is the length of lift list 540\n","This is the length of cluster list 540\n","This is the length of year list 540\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 4"],"metadata":{"id":"IrDzjUnl1ozq"}},{"cell_type":"code","source":["records2018_4 = []\n","for i in df2018_4['product_ids']:\n","  records2018_4.append(i)\n","\n","association_rules2018_4 = apriori(records2018_4, min_support=0.0001, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2018_4 = list(association_rules2018_4)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2018_4)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lwHfgrCF1oYV","executionInfo":{"status":"ok","timestamp":1713669896867,"user_tz":240,"elapsed":5415,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"b0e686d9-6084-420e-828e-dd8206f6de64"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 103 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2018_4:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"4\")\n","    year_list.append(\"2018\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ccXokJ3FBASY","executionInfo":{"status":"ok","timestamp":1713669896868,"user_tz":240,"elapsed":14,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"30ddc87f-71bb-4f40-ba4b-7e1923e11030"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CJkuJoMiBE2l","executionInfo":{"status":"ok","timestamp":1713669896868,"user_tz":240,"elapsed":13,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"ffdd168d-5098-464b-b5c1-ea4058b3bfaa"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 643\n","This is the length of support list 643\n","This is the length of confidence list 643\n","This is the length of lift list 643\n","This is the length of cluster list 643\n","This is the length of year list 643\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 5"],"metadata":{"id":"7s8YGTaW113o"}},{"cell_type":"code","source":["records2018_5 = []\n","for i in df2018_5['product_ids']:\n","  records2018_5.append(i)\n","\n","association_rules2018_5 = apriori(records2018_5, min_support=0.0003, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2018_5 = list(association_rules2018_5)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2018_5)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yQkq8HWU13tO","executionInfo":{"status":"ok","timestamp":1713669897517,"user_tz":240,"elapsed":662,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"df4fb476-e1dc-4ef6-89c8-955b7587b524"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 24 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2018_5:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"5\")\n","    year_list.append(\"2018\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ABJUosLeBIda","executionInfo":{"status":"ok","timestamp":1713669897517,"user_tz":240,"elapsed":4,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"b4eccb6c-edce-443c-e600-16284aeb750d"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TG3PhmaRBf9I","executionInfo":{"status":"ok","timestamp":1713669897517,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"4694884e-a22e-4411-9f91-30d86ca0894b"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 667\n","This is the length of support list 667\n","This is the length of confidence list 667\n","This is the length of lift list 667\n","This is the length of cluster list 667\n","This is the length of year list 667\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["### Cluster 6"],"metadata":{"id":"FOPGm9d52Llz"}},{"cell_type":"code","source":["records2018_6 = []\n","for i in df2018_6['product_ids']:\n","  records2018_6.append(i)\n","\n","association_rules2018_6 = apriori(records2018_6, min_support=0.0002, min_confidence=0.5, min_lift=3, min_length=2)\n","association_results2018_6 = list(association_rules2018_6)\n","\n","print(\"There are {} Relation derived.\".format(len(association_results2018_6)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UZRE1X-J2NTX","executionInfo":{"status":"ok","timestamp":1713669899207,"user_tz":240,"elapsed":1692,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"59517f47-0e19-4b3c-d440-8acbe10b461a"},"execution_count":59,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"stream","name":"stdout","text":["There are 14 Relation derived.\n"]}]},{"cell_type":"code","source":["for item in association_results2018_6:\n","    pair = item[0]\n","    items = [x for x in pair]\n","    rule = items[0] + \" -> \" + items[1]\n","    support = item[1]\n","    confidence = item[2][0][2]\n","    lift = item[2][0][3]\n","\n","    # Append information to lists\n","    rules_list.append(rule)\n","    support_list.append(support)\n","    confidence_list.append(confidence)\n","    lift_list.append(lift)\n","    cluster_list.append(\"6\")\n","    year_list.append(\"2018\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VaasV-HpBin0","executionInfo":{"status":"ok","timestamp":1713669899207,"user_tz":240,"elapsed":4,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"6630a19a-44a4-4d6f-e59d-7d417c470c0d"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["print(\"This is the length of rule list\", len(rules_list))\n","print(\"This is the length of support list\", len(support_list))\n","print(\"This is the length of confidence list\", len(confidence_list))\n","print(\"This is the length of lift list\", len(lift_list))\n","print(\"This is the length of cluster list\", len(cluster_list))\n","print(\"This is the length of year list\", len(year_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pxGPTiwjBmqA","executionInfo":{"status":"ok","timestamp":1713669899207,"user_tz":240,"elapsed":3,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"69272740-f25d-48b7-90ad-d8825b8b83b1"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["This is the length of rule list 681\n","This is the length of support list 681\n","This is the length of confidence list 681\n","This is the length of lift list 681\n","This is the length of cluster list 681\n","This is the length of year list 681\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"markdown","source":["# Final DataFrame"],"metadata":{"id":"asSI6SsIBuae"}},{"cell_type":"code","source":["rules_df = pd.DataFrame({\n","    'Rule': rules_list,\n","    'Support': support_list,\n","    'Confidence': confidence_list,\n","    'Lift': lift_list,\n","    'Cluster': cluster_list,\n","    'Year': year_list\n","})"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U3idvrBFBxpI","executionInfo":{"status":"ok","timestamp":1713669906338,"user_tz":240,"elapsed":137,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"1f1d1d2e-db62-4f01-ff11-db9da9b44d32"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["rules_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":478},"id":"u-MqClFlB-s6","executionInfo":{"status":"ok","timestamp":1713650746347,"user_tz":240,"elapsed":160,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"829a4756-3a30-4292-fa2f-ea0a4bc38f56"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                  Rule   Support  Confidence  \\\n","0     0bfd2b8146cd034448f6e4c8ac8e47f0 ->  0ee7a6e1...  0.005208    1.000000   \n","1     2c41d13dc2cf0e9c2e8db8952f0f3ff3 ->  0bfd2b81...  0.005208    1.000000   \n","2    b4763c2caeeac2424b64aa199789b81b ->  0bfd2b814...  0.005208    1.000000   \n","3     2c41d13dc2cf0e9c2e8db8952f0f3ff3 ->  0ee7a6e1...  0.005208    1.000000   \n","4    b4763c2caeeac2424b64aa199789b81b ->  0ee7a6e1c...  0.005208    1.000000   \n","..                                                 ...       ...         ...   \n","669  9f1c3e71d56894398a42b050b07f1baa ->  9f1c3e71d...  0.000294    1.000000   \n","670  ab1f9387c0627dd24000bfbc54fdeee0 ->  ab1f9387c...  0.000294    0.666667   \n","671  d6fad98893f5848590aee04c63832cd0 ->  d6fad9889...  0.000294    1.000000   \n","672   e84bf31698e5842d605c5aa9cfc8b02a -> e84bf3169...  0.000294    1.000000   \n","673   ef1c671d636510846d72e7aa3af1e0a5 -> 31c79131e...  0.000294    1.000000   \n","\n","            Lift Cluster  Year  \n","0     192.000000       2  2016  \n","1     192.000000       2  2016  \n","2     192.000000       2  2016  \n","3     192.000000       2  2016  \n","4     192.000000       2  2016  \n","..           ...     ...   ...  \n","669   523.538462       6  2018  \n","670   189.055556       6  2018  \n","671  3403.000000       6  2018  \n","672  3403.000000       6  2018  \n","673   567.166667       6  2018  \n","\n","[674 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-283f11ab-1b5f-40e7-af64-b479a406243d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Rule</th>\n","      <th>Support</th>\n","      <th>Confidence</th>\n","      <th>Lift</th>\n","      <th>Cluster</th>\n","      <th>Year</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0bfd2b8146cd034448f6e4c8ac8e47f0 -&gt;  0ee7a6e1...</td>\n","      <td>0.005208</td>\n","      <td>1.000000</td>\n","      <td>192.000000</td>\n","      <td>2</td>\n","      <td>2016</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2c41d13dc2cf0e9c2e8db8952f0f3ff3 -&gt;  0bfd2b81...</td>\n","      <td>0.005208</td>\n","      <td>1.000000</td>\n","      <td>192.000000</td>\n","      <td>2</td>\n","      <td>2016</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>b4763c2caeeac2424b64aa199789b81b -&gt;  0bfd2b814...</td>\n","      <td>0.005208</td>\n","      <td>1.000000</td>\n","      <td>192.000000</td>\n","      <td>2</td>\n","      <td>2016</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2c41d13dc2cf0e9c2e8db8952f0f3ff3 -&gt;  0ee7a6e1...</td>\n","      <td>0.005208</td>\n","      <td>1.000000</td>\n","      <td>192.000000</td>\n","      <td>2</td>\n","      <td>2016</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>b4763c2caeeac2424b64aa199789b81b -&gt;  0ee7a6e1c...</td>\n","      <td>0.005208</td>\n","      <td>1.000000</td>\n","      <td>192.000000</td>\n","      <td>2</td>\n","      <td>2016</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>669</th>\n","      <td>9f1c3e71d56894398a42b050b07f1baa -&gt;  9f1c3e71d...</td>\n","      <td>0.000294</td>\n","      <td>1.000000</td>\n","      <td>523.538462</td>\n","      <td>6</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>670</th>\n","      <td>ab1f9387c0627dd24000bfbc54fdeee0 -&gt;  ab1f9387c...</td>\n","      <td>0.000294</td>\n","      <td>0.666667</td>\n","      <td>189.055556</td>\n","      <td>6</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>671</th>\n","      <td>d6fad98893f5848590aee04c63832cd0 -&gt;  d6fad9889...</td>\n","      <td>0.000294</td>\n","      <td>1.000000</td>\n","      <td>3403.000000</td>\n","      <td>6</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>672</th>\n","      <td>e84bf31698e5842d605c5aa9cfc8b02a -&gt; e84bf3169...</td>\n","      <td>0.000294</td>\n","      <td>1.000000</td>\n","      <td>3403.000000</td>\n","      <td>6</td>\n","      <td>2018</td>\n","    </tr>\n","    <tr>\n","      <th>673</th>\n","      <td>ef1c671d636510846d72e7aa3af1e0a5 -&gt; 31c79131e...</td>\n","      <td>0.000294</td>\n","      <td>1.000000</td>\n","      <td>567.166667</td>\n","      <td>6</td>\n","      <td>2018</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>674 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-283f11ab-1b5f-40e7-af64-b479a406243d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-283f11ab-1b5f-40e7-af64-b479a406243d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-283f11ab-1b5f-40e7-af64-b479a406243d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-867bf1cb-a883-41b0-a283-13e91f8f4a9c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-867bf1cb-a883-41b0-a283-13e91f8f4a9c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-867bf1cb-a883-41b0-a283-13e91f8f4a9c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f804b7fa-0949-4b78-bcf5-b48c6bc53fab\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rules_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f804b7fa-0949-4b78-bcf5-b48c6bc53fab button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('rules_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"rules_df","summary":"{\n  \"name\": \"rules_df\",\n  \"rows\": 674,\n  \"fields\": [\n    {\n      \"column\": \"Rule\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 537,\n        \"samples\": [\n          \" ae16b1d896c15ed60614a0d88c4abf03 -> ae16b1d896c15ed60614a0d88c4abf03\",\n          \"372645c7439f9661fbbacfd129aa92ec ->  42155695adbe665066ad812855fe523a\",\n          \" b59fb744c6f3cd1dc23b10f760848d98 -> b59fb744c6f3cd1dc23b10f760848d98\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Support\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.00376010776753339,\n        \"min\": 0.00012549413314927527,\n        \"max\": 0.02631578947368421,\n        \"num_unique_values\": 71,\n        \"samples\": [\n          0.0015511892450879006,\n          0.005208333333333333,\n          0.0004856254856254856\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Confidence\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09350043399636847,\n        \"min\": 0.5,\n        \"max\": 1.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          0.8333333333333333,\n          0.75,\n          0.6923076923076923\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lift\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1735.2733636422975,\n        \"min\": 19.0,\n        \"max\": 7968.5,\n        \"num_unique_values\": 202,\n        \"samples\": [\n          1448.818181818182,\n          7122.666666666667,\n          1643.6923076923076\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cluster\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"2\",\n          \"3\",\n          \"6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2016\",\n          \"2017\",\n          \"2018\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["# Sort the DataFrame by 'clusters', 'year', 'confidence', and 'support' in descending order\n","sorted_df = rules_df.sort_values(by=['Cluster', 'Year', 'Confidence', 'Support'], ascending=[True, True, False, False])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i_x_vL56D4aD","executionInfo":{"status":"ok","timestamp":1713669911750,"user_tz":240,"elapsed":5,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"fca61276-387c-4ad4-a349-f708af40dd2c"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["rules_df['Rank'] = sorted_df.groupby(['Cluster', 'Year']).cumcount() + 1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xZDdRTv5EOE6","executionInfo":{"status":"ok","timestamp":1713669913279,"user_tz":240,"elapsed":129,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"28ee9fad-bf96-4c79-8426-cf0499b79b36"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["topRules_df = rules_df[(rules_df['Rank'] == 1) | (rules_df['Rank'] == 2) | (rules_df['Rank'] == 3)]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XglHwiC1Gwj5","executionInfo":{"status":"ok","timestamp":1713669403810,"user_tz":240,"elapsed":137,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"f215e468-0409-4f52-b60e-3462157d0e0a"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["topRules_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"vsuqbkStHjVB","executionInfo":{"status":"ok","timestamp":1713643603258,"user_tz":240,"elapsed":138,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"c5bc295a-4b85-4ffa-e470-7b6b3140212b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                  Rule   Support  Confidence  \\\n","0     0bfd2b8146cd034448f6e4c8ac8e47f0 ->  0ee7a6e1...  0.005208    1.000000   \n","1     2c41d13dc2cf0e9c2e8db8952f0f3ff3 ->  0bfd2b81...  0.005208    1.000000   \n","2     0bfd2b8146cd034448f6e4c8ac8e47f0 -> b4763c2ca...  0.005208    1.000000   \n","74   46d66b9ad911a2cea5e3c9127aa7fac5 ->  46d66b9ad...  0.026316    1.000000   \n","75    7721582bb750762d81850267d19881c1 ->  65bb78cf...  0.026316    1.000000   \n","76   7721582bb750762d81850267d19881c1 ->  65bb78cf0...  0.026316    1.000000   \n","86   0449db5eede617c5fd413071d582f038 ->  0449db5ee...  0.002907    1.000000   \n","87   0554911df28fda9fd668ce5ba5949695 ->  0554911df...  0.002907    1.000000   \n","88    06484143f7046fc1c2ec000aba13e28a -> a2307a34b...  0.002907    1.000000   \n","138  368c6c730842d78016ad823897a372db ->  368c6c730...  0.001310    0.875000   \n","140  422879e10f46682990de24d770e7f83d ->  422879e10...  0.001451    0.861111   \n","142  b532349fe46b38fbc7bb3914c1bdae07 ->  b532349fe...  0.001030    1.000000   \n","143  08574b074924071f4e201e151b152b4e ->  08574b074...  0.001034    0.857143   \n","144  422879e10f46682990de24d770e7f83d ->  422879e10...  0.001551    0.900000   \n","145  f4f67ccaece962d013a4e1d7dc3a61f7 ->  4fcb3d9a5...  0.001724    0.909091   \n","147   01ef0716b68c8493434ad32430c24e18 ->  fe6f03ce...  0.004975    1.000000   \n","148   01ef0716b68c8493434ad32430c24e18 -> fe6f03ced...  0.004975    1.000000   \n","149   113f80f12c8892f0c59206f70b862b40 ->  a8d2af10...  0.004975    1.000000   \n","191  368c6c730842d78016ad823897a372db ->  368c6c730...  0.003275    1.000000   \n","192   389d119b48cf3043d311335e499d9c6b -> 389d119b4...  0.002183    1.000000   \n","193  422879e10f46682990de24d770e7f83d ->  422879e10...  0.002183    1.000000   \n","196  569ffd16f8032478cbeb9800f2e94ba0 ->  569ffd16f...  0.000565    1.000000   \n","197  63de2743d05ab59d85caa49e49459ac1 ->  63de2743d...  0.000314    1.000000   \n","199  d3c044bd42d84a79e3b0c42662806a48 ->  d3c044bd4...  0.000502    1.000000   \n","200   362052fcdf7c9e3596a0a6c97536cdc3 ->  00faa46f...  0.004167    1.000000   \n","201  63094ac128b54dd72d511043411df079 ->  00faa46f3...  0.004167    1.000000   \n","202  c477957dd9b5f51032f3631c50630585 ->  093f7389f...  0.004167    1.000000   \n","248  060c17562f97e5bb60bc0dfa4dd5b3f2 ->  060c17562...  0.000501    1.000000   \n","249   634256dbcd184b3757ffd7632c9fe52a -> 634256dbc...  0.000501    1.000000   \n","250  c50ca07e9e4db9ea5011f06802c0aea0 ->  c50ca07e9...  0.000501    1.000000   \n","251   3dd2a17168ec895c781a9191c1e95ad7 -> 3dd2a1716...  0.002272    1.000000   \n","252   a62e25e09e05e6faf31d90c6ec1aa3d1 -> a62e25e09...  0.002892    1.000000   \n","253  d1c427060a0f73f6b889a5c7c61f2ac4 ->  d1c427060...  0.002272    0.846154   \n","254  054515fd15bc1a2029f10de97ffa9120 ->  054515fd1...  0.000583    1.000000   \n","257  b532349fe46b38fbc7bb3914c1bdae07 ->  b532349fe...  0.000971    1.000000   \n","258   e7cc48a9daff5436f63d3aad9426f28b -> e7cc48a9d...  0.000874    1.000000   \n","260  422879e10f46682990de24d770e7f83d ->  422879e10...  0.001427    0.903226   \n","261  aca2eb7d00ea1a7b8ebd4e68314663af ->  aca2eb7d0...  0.002905    0.966102   \n","262  b532349fe46b38fbc7bb3914c1bdae07 ->  b532349fe...  0.001172    1.000000   \n","263  50fd2b788dc166edd20512370dac54df ->  50fd2b788...  0.000588    1.000000   \n","264  9007d9a8a0d332c61d9dd611fa341f4b ->  9007d9a8a...  0.000735    1.000000   \n","\n","            Lift Cluster  Year  Rank  \n","0     192.000000       2  2016     1  \n","1     192.000000       2  2016     2  \n","2     192.000000       2  2016     3  \n","74     38.000000       3  2016     1  \n","75     38.000000       3  2016     2  \n","76     38.000000       3  2016     3  \n","86    344.000000       0  2017     1  \n","87    344.000000       0  2017     2  \n","88    344.000000       0  2017     3  \n","138   467.425000       2  2017     2  \n","140   375.514739       2  2017     3  \n","142   890.333333       2  2017     1  \n","143   621.642857       3  2017     3  \n","144   580.200000       3  2017     2  \n","145   310.267380       3  2017     1  \n","147   201.000000       4  2017     1  \n","148   201.000000       4  2017     2  \n","149   201.000000       4  2017     3  \n","191   229.000000       5  2017     1  \n","192   152.666667       5  2017     2  \n","193   305.333333       5  2017     3  \n","196   796.850000       6  2017     1  \n","197   549.551724       6  2017     3  \n","199   398.425000       6  2017     2  \n","200   240.000000       0  2018     1  \n","201   240.000000       0  2018     2  \n","202   240.000000       0  2018     3  \n","248   427.607143       1  2018     1  \n","249   374.156250       1  2018     2  \n","250   665.166667       1  2018     3  \n","251   372.384615       3  2018     2  \n","252   302.562500       3  2018     1  \n","253   256.014423       3  2018     3  \n","254  1716.000000       4  2018     3  \n","257  1029.600000       4  2018     1  \n","258   174.508475       4  2018     2  \n","260   305.523915       5  2018     3  \n","261    69.174997       5  2018     2  \n","262   817.458333       5  2018     1  \n","263   283.583333       6  2018     2  \n","264   850.750000       6  2018     1  "],"text/html":["\n","  <div id=\"df-8152d529-8114-48bb-bf91-0ac1310abc78\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Rule</th>\n","      <th>Support</th>\n","      <th>Confidence</th>\n","      <th>Lift</th>\n","      <th>Cluster</th>\n","      <th>Year</th>\n","      <th>Rank</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0bfd2b8146cd034448f6e4c8ac8e47f0 -&gt;  0ee7a6e1...</td>\n","      <td>0.005208</td>\n","      <td>1.000000</td>\n","      <td>192.000000</td>\n","      <td>2</td>\n","      <td>2016</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2c41d13dc2cf0e9c2e8db8952f0f3ff3 -&gt;  0bfd2b81...</td>\n","      <td>0.005208</td>\n","      <td>1.000000</td>\n","      <td>192.000000</td>\n","      <td>2</td>\n","      <td>2016</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0bfd2b8146cd034448f6e4c8ac8e47f0 -&gt; b4763c2ca...</td>\n","      <td>0.005208</td>\n","      <td>1.000000</td>\n","      <td>192.000000</td>\n","      <td>2</td>\n","      <td>2016</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>74</th>\n","      <td>46d66b9ad911a2cea5e3c9127aa7fac5 -&gt;  46d66b9ad...</td>\n","      <td>0.026316</td>\n","      <td>1.000000</td>\n","      <td>38.000000</td>\n","      <td>3</td>\n","      <td>2016</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>75</th>\n","      <td>7721582bb750762d81850267d19881c1 -&gt;  65bb78cf...</td>\n","      <td>0.026316</td>\n","      <td>1.000000</td>\n","      <td>38.000000</td>\n","      <td>3</td>\n","      <td>2016</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>76</th>\n","      <td>7721582bb750762d81850267d19881c1 -&gt;  65bb78cf0...</td>\n","      <td>0.026316</td>\n","      <td>1.000000</td>\n","      <td>38.000000</td>\n","      <td>3</td>\n","      <td>2016</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>0449db5eede617c5fd413071d582f038 -&gt;  0449db5ee...</td>\n","      <td>0.002907</td>\n","      <td>1.000000</td>\n","      <td>344.000000</td>\n","      <td>0</td>\n","      <td>2017</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>87</th>\n","      <td>0554911df28fda9fd668ce5ba5949695 -&gt;  0554911df...</td>\n","      <td>0.002907</td>\n","      <td>1.000000</td>\n","      <td>344.000000</td>\n","      <td>0</td>\n","      <td>2017</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>88</th>\n","      <td>06484143f7046fc1c2ec000aba13e28a -&gt; a2307a34b...</td>\n","      <td>0.002907</td>\n","      <td>1.000000</td>\n","      <td>344.000000</td>\n","      <td>0</td>\n","      <td>2017</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>138</th>\n","      <td>368c6c730842d78016ad823897a372db -&gt;  368c6c730...</td>\n","      <td>0.001310</td>\n","      <td>0.875000</td>\n","      <td>467.425000</td>\n","      <td>2</td>\n","      <td>2017</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>140</th>\n","      <td>422879e10f46682990de24d770e7f83d -&gt;  422879e10...</td>\n","      <td>0.001451</td>\n","      <td>0.861111</td>\n","      <td>375.514739</td>\n","      <td>2</td>\n","      <td>2017</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>142</th>\n","      <td>b532349fe46b38fbc7bb3914c1bdae07 -&gt;  b532349fe...</td>\n","      <td>0.001030</td>\n","      <td>1.000000</td>\n","      <td>890.333333</td>\n","      <td>2</td>\n","      <td>2017</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>143</th>\n","      <td>08574b074924071f4e201e151b152b4e -&gt;  08574b074...</td>\n","      <td>0.001034</td>\n","      <td>0.857143</td>\n","      <td>621.642857</td>\n","      <td>3</td>\n","      <td>2017</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>144</th>\n","      <td>422879e10f46682990de24d770e7f83d -&gt;  422879e10...</td>\n","      <td>0.001551</td>\n","      <td>0.900000</td>\n","      <td>580.200000</td>\n","      <td>3</td>\n","      <td>2017</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>145</th>\n","      <td>f4f67ccaece962d013a4e1d7dc3a61f7 -&gt;  4fcb3d9a5...</td>\n","      <td>0.001724</td>\n","      <td>0.909091</td>\n","      <td>310.267380</td>\n","      <td>3</td>\n","      <td>2017</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>147</th>\n","      <td>01ef0716b68c8493434ad32430c24e18 -&gt;  fe6f03ce...</td>\n","      <td>0.004975</td>\n","      <td>1.000000</td>\n","      <td>201.000000</td>\n","      <td>4</td>\n","      <td>2017</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>148</th>\n","      <td>01ef0716b68c8493434ad32430c24e18 -&gt; fe6f03ced...</td>\n","      <td>0.004975</td>\n","      <td>1.000000</td>\n","      <td>201.000000</td>\n","      <td>4</td>\n","      <td>2017</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>149</th>\n","      <td>113f80f12c8892f0c59206f70b862b40 -&gt;  a8d2af10...</td>\n","      <td>0.004975</td>\n","      <td>1.000000</td>\n","      <td>201.000000</td>\n","      <td>4</td>\n","      <td>2017</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>191</th>\n","      <td>368c6c730842d78016ad823897a372db -&gt;  368c6c730...</td>\n","      <td>0.003275</td>\n","      <td>1.000000</td>\n","      <td>229.000000</td>\n","      <td>5</td>\n","      <td>2017</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>192</th>\n","      <td>389d119b48cf3043d311335e499d9c6b -&gt; 389d119b4...</td>\n","      <td>0.002183</td>\n","      <td>1.000000</td>\n","      <td>152.666667</td>\n","      <td>5</td>\n","      <td>2017</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>193</th>\n","      <td>422879e10f46682990de24d770e7f83d -&gt;  422879e10...</td>\n","      <td>0.002183</td>\n","      <td>1.000000</td>\n","      <td>305.333333</td>\n","      <td>5</td>\n","      <td>2017</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>569ffd16f8032478cbeb9800f2e94ba0 -&gt;  569ffd16f...</td>\n","      <td>0.000565</td>\n","      <td>1.000000</td>\n","      <td>796.850000</td>\n","      <td>6</td>\n","      <td>2017</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>63de2743d05ab59d85caa49e49459ac1 -&gt;  63de2743d...</td>\n","      <td>0.000314</td>\n","      <td>1.000000</td>\n","      <td>549.551724</td>\n","      <td>6</td>\n","      <td>2017</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>d3c044bd42d84a79e3b0c42662806a48 -&gt;  d3c044bd4...</td>\n","      <td>0.000502</td>\n","      <td>1.000000</td>\n","      <td>398.425000</td>\n","      <td>6</td>\n","      <td>2017</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>362052fcdf7c9e3596a0a6c97536cdc3 -&gt;  00faa46f...</td>\n","      <td>0.004167</td>\n","      <td>1.000000</td>\n","      <td>240.000000</td>\n","      <td>0</td>\n","      <td>2018</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>201</th>\n","      <td>63094ac128b54dd72d511043411df079 -&gt;  00faa46f3...</td>\n","      <td>0.004167</td>\n","      <td>1.000000</td>\n","      <td>240.000000</td>\n","      <td>0</td>\n","      <td>2018</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>202</th>\n","      <td>c477957dd9b5f51032f3631c50630585 -&gt;  093f7389f...</td>\n","      <td>0.004167</td>\n","      <td>1.000000</td>\n","      <td>240.000000</td>\n","      <td>0</td>\n","      <td>2018</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>248</th>\n","      <td>060c17562f97e5bb60bc0dfa4dd5b3f2 -&gt;  060c17562...</td>\n","      <td>0.000501</td>\n","      <td>1.000000</td>\n","      <td>427.607143</td>\n","      <td>1</td>\n","      <td>2018</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>249</th>\n","      <td>634256dbcd184b3757ffd7632c9fe52a -&gt; 634256dbc...</td>\n","      <td>0.000501</td>\n","      <td>1.000000</td>\n","      <td>374.156250</td>\n","      <td>1</td>\n","      <td>2018</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>c50ca07e9e4db9ea5011f06802c0aea0 -&gt;  c50ca07e9...</td>\n","      <td>0.000501</td>\n","      <td>1.000000</td>\n","      <td>665.166667</td>\n","      <td>1</td>\n","      <td>2018</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>251</th>\n","      <td>3dd2a17168ec895c781a9191c1e95ad7 -&gt; 3dd2a1716...</td>\n","      <td>0.002272</td>\n","      <td>1.000000</td>\n","      <td>372.384615</td>\n","      <td>3</td>\n","      <td>2018</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>252</th>\n","      <td>a62e25e09e05e6faf31d90c6ec1aa3d1 -&gt; a62e25e09...</td>\n","      <td>0.002892</td>\n","      <td>1.000000</td>\n","      <td>302.562500</td>\n","      <td>3</td>\n","      <td>2018</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>253</th>\n","      <td>d1c427060a0f73f6b889a5c7c61f2ac4 -&gt;  d1c427060...</td>\n","      <td>0.002272</td>\n","      <td>0.846154</td>\n","      <td>256.014423</td>\n","      <td>3</td>\n","      <td>2018</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>254</th>\n","      <td>054515fd15bc1a2029f10de97ffa9120 -&gt;  054515fd1...</td>\n","      <td>0.000583</td>\n","      <td>1.000000</td>\n","      <td>1716.000000</td>\n","      <td>4</td>\n","      <td>2018</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>257</th>\n","      <td>b532349fe46b38fbc7bb3914c1bdae07 -&gt;  b532349fe...</td>\n","      <td>0.000971</td>\n","      <td>1.000000</td>\n","      <td>1029.600000</td>\n","      <td>4</td>\n","      <td>2018</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>258</th>\n","      <td>e7cc48a9daff5436f63d3aad9426f28b -&gt; e7cc48a9d...</td>\n","      <td>0.000874</td>\n","      <td>1.000000</td>\n","      <td>174.508475</td>\n","      <td>4</td>\n","      <td>2018</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>260</th>\n","      <td>422879e10f46682990de24d770e7f83d -&gt;  422879e10...</td>\n","      <td>0.001427</td>\n","      <td>0.903226</td>\n","      <td>305.523915</td>\n","      <td>5</td>\n","      <td>2018</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>261</th>\n","      <td>aca2eb7d00ea1a7b8ebd4e68314663af -&gt;  aca2eb7d0...</td>\n","      <td>0.002905</td>\n","      <td>0.966102</td>\n","      <td>69.174997</td>\n","      <td>5</td>\n","      <td>2018</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>262</th>\n","      <td>b532349fe46b38fbc7bb3914c1bdae07 -&gt;  b532349fe...</td>\n","      <td>0.001172</td>\n","      <td>1.000000</td>\n","      <td>817.458333</td>\n","      <td>5</td>\n","      <td>2018</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>263</th>\n","      <td>50fd2b788dc166edd20512370dac54df -&gt;  50fd2b788...</td>\n","      <td>0.000588</td>\n","      <td>1.000000</td>\n","      <td>283.583333</td>\n","      <td>6</td>\n","      <td>2018</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>264</th>\n","      <td>9007d9a8a0d332c61d9dd611fa341f4b -&gt;  9007d9a8a...</td>\n","      <td>0.000735</td>\n","      <td>1.000000</td>\n","      <td>850.750000</td>\n","      <td>6</td>\n","      <td>2018</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8152d529-8114-48bb-bf91-0ac1310abc78')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8152d529-8114-48bb-bf91-0ac1310abc78 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8152d529-8114-48bb-bf91-0ac1310abc78');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5b1e6edf-5c57-42f6-a227-2710425b7795\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5b1e6edf-5c57-42f6-a227-2710425b7795')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5b1e6edf-5c57-42f6-a227-2710425b7795 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_25e93a5a-3134-4d3a-9c4e-30ff4f12fceb\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('topRules_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_25e93a5a-3134-4d3a-9c4e-30ff4f12fceb button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('topRules_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"topRules_df","summary":"{\n  \"name\": \"topRules_df\",\n  \"rows\": 41,\n  \"fields\": [\n    {\n      \"column\": \"Rule\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 35,\n        \"samples\": [\n          \"c50ca07e9e4db9ea5011f06802c0aea0 ->  c50ca07e9e4db9ea5011f06802c0aea0\",\n          \"f4f67ccaece962d013a4e1d7dc3a61f7 ->  4fcb3d9a5f4871e8362dfedbdb02b064\",\n          \"060c17562f97e5bb60bc0dfa4dd5b3f2 ->  060c17562f97e5bb60bc0dfa4dd5b3f2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Support\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.006528267593073554,\n        \"min\": 0.0003137353328731882,\n        \"max\": 0.02631578947368421,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          0.001723543605653223,\n          0.0003137353328731882,\n          0.004975124378109453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Confidence\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04711408887120101,\n        \"min\": 0.8461538461538463,\n        \"max\": 1.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.9032258064516129,\n          0.8749999999999999,\n          0.9090909090909091\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lift\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321.46406909490537,\n        \"min\": 38.0,\n        \"max\": 1716.0,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          69.17499690708895,\n          398.42499999999995,\n          1716.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cluster\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"2\",\n          \"3\",\n          \"6\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Year\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2016\",\n          \"2017\",\n          \"2018\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":85}]},{"cell_type":"code","source":["topRules_df.to_csv(\"AssociationRules/TopAssociation_rules.csv\", index = False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QT04TuhBCPiA","executionInfo":{"status":"ok","timestamp":1713650984594,"user_tz":240,"elapsed":154,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"8fe77358-7c86-4749-bffd-62d7966f61dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]},{"cell_type":"code","source":["rules_df.to_csv(\"AssociationRules/FinalAssociation_rules.csv\", index = False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8S6yX0H5kX62","executionInfo":{"status":"ok","timestamp":1713670140746,"user_tz":240,"elapsed":171,"user":{"displayName":"Alissa Dao","userId":"00646040571955308100"}},"outputId":"2422fb86-d5ea-45d1-fa32-01fead6b8752"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n","  and should_run_async(code)\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOJib4ssi29ByyavOLh0GcL"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}